// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ef_core_mastering.Context;

#nullable disable

namespace ef_core_mastering.Migrations
{
    [DbContext(typeof(SpeedrunsContext))]
    [Migration("20240207093208_flag-fix")]
    partial class flagfix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ef_core_mastering.Models.Approve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("RunId")
                        .HasColumnType("integer")
                        .HasColumnName("run_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("approves_pkey");

                    b.HasIndex("AdminId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "RunId", "AdminId" }, "approves_run_id_admin_id_key")
                        .IsUnique();

                    b.ToTable("approves", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.HasIndex(new[] { "Name" }, "categories_name_key")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('contact_id_seq'::regclass)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("contact_pkey");

                    b.HasIndex(new[] { "Value" }, "contact_value_key")
                        .IsUnique();

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.ContactsUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("contacts_users_pkey");

                    b.HasIndex("ContactId");

                    b.HasIndex(new[] { "UserId" }, "contacts_users_user_id_contact_id_key")
                        .IsUnique();

                    b.ToTable("contacts_users", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('country_id_seq'::regclass)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("country_pkey");

                    b.HasIndex(new[] { "Name" }, "country_name_flag_key")
                        .IsUnique();

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("games_pkey");

                    b.HasIndex(new[] { "Name" }, "games_name_key")
                        .IsUnique();

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.GamesPlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer")
                        .HasColumnName("platform_id");

                    b.HasKey("Id")
                        .HasName("games_platforms_pkey");

                    b.HasIndex("PlatformId");

                    b.HasIndex(new[] { "GameId" }, "games_platforms_game_id_platform_id_key")
                        .IsUnique();

                    b.ToTable("games_platforms", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('language_id_seq'::regclass)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("language_pkey");

                    b.HasIndex(new[] { "Value" }, "language_value_key")
                        .IsUnique();

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.LanguagesUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("languages_users_pkey");

                    b.HasIndex("LanguageId");

                    b.HasIndex(new[] { "UserId" }, "languages_users_user_id_language_id_key")
                        .IsUnique();

                    b.ToTable("languages_users", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("platforms_pkey");

                    b.HasIndex(new[] { "Name" }, "platforms_name_key")
                        .IsUnique();

                    b.ToTable("platforms", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Value" }, "roles_value_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("GamePlatformId")
                        .HasColumnType("integer")
                        .HasColumnName("game_platform_id");

                    b.Property<TimeOnly>("Result")
                        .HasColumnType("time without time zone")
                        .HasColumnName("result");

                    b.Property<DateTime>("Uploaded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("uploaded");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("runs_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GamePlatformId");

                    b.ToTable("runs", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('status_id_seq'::regclass)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("status_pkey");

                    b.HasIndex(new[] { "Value" }, "status_value_key")
                        .IsUnique();

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RunId")
                        .HasColumnType("integer")
                        .HasColumnName("run_id");

                    b.Property<int>("SpeedrunnerId")
                        .HasColumnType("integer")
                        .HasColumnName("speedrunner_id");

                    b.HasKey("Id")
                        .HasName("teams_pkey");

                    b.HasIndex("SpeedrunnerId");

                    b.HasIndex(new[] { "RunId", "SpeedrunnerId" }, "teams_run_id_speedrunner_id_key")
                        .IsUnique();

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nickname");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("CountryId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ef_core_mastering.Models.Approve", b =>
                {
                    b.HasOne("ef_core_mastering.Models.User", "Admin")
                        .WithMany("Approves")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("fk_admins_approves");

                    b.HasOne("ef_core_mastering.Models.Role", "Role")
                        .WithMany("Approves")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_approves");

                    b.HasOne("ef_core_mastering.Models.Run", "Run")
                        .WithMany("Approves")
                        .HasForeignKey("RunId")
                        .IsRequired()
                        .HasConstraintName("fk_runs_approves");

                    b.HasOne("ef_core_mastering.Models.Status", "Status")
                        .WithMany("Approves")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("fk_statses_approves");

                    b.Navigation("Admin");

                    b.Navigation("Role");

                    b.Navigation("Run");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ef_core_mastering.Models.ContactsUser", b =>
                {
                    b.HasOne("ef_core_mastering.Models.Contact", "Contact")
                        .WithMany("ContactsUsers")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("fk_contacts_contacts_users");

                    b.HasOne("ef_core_mastering.Models.User", "User")
                        .WithOne("ContactsUser")
                        .HasForeignKey("ef_core_mastering.Models.ContactsUser", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_users_contacts_users");

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ef_core_mastering.Models.GamesPlatform", b =>
                {
                    b.HasOne("ef_core_mastering.Models.Game", "Game")
                        .WithOne("GamesPlatform")
                        .HasForeignKey("ef_core_mastering.Models.GamesPlatform", "GameId")
                        .IsRequired()
                        .HasConstraintName("fk_games_games_platforms");

                    b.HasOne("ef_core_mastering.Models.Platform", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("PlatformId")
                        .IsRequired()
                        .HasConstraintName("fk_platforms_games_platforms");

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("ef_core_mastering.Models.LanguagesUser", b =>
                {
                    b.HasOne("ef_core_mastering.Models.Language", "Language")
                        .WithMany("LanguagesUsers")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("fk_languages_languages_users");

                    b.HasOne("ef_core_mastering.Models.User", "User")
                        .WithOne("LanguagesUser")
                        .HasForeignKey("ef_core_mastering.Models.LanguagesUser", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_users_languages_users");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Run", b =>
                {
                    b.HasOne("ef_core_mastering.Models.Category", "Category")
                        .WithMany("Runs")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_categories_runs");

                    b.HasOne("ef_core_mastering.Models.GamesPlatform", "GamePlatform")
                        .WithMany("Runs")
                        .HasForeignKey("GamePlatformId")
                        .IsRequired()
                        .HasConstraintName("fk_games_platforms_runs");

                    b.Navigation("Category");

                    b.Navigation("GamePlatform");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Team", b =>
                {
                    b.HasOne("ef_core_mastering.Models.Run", "Run")
                        .WithMany("Teams")
                        .HasForeignKey("RunId")
                        .IsRequired()
                        .HasConstraintName("fk_runs_teams");

                    b.HasOne("ef_core_mastering.Models.User", "Speedrunner")
                        .WithMany("Teams")
                        .HasForeignKey("SpeedrunnerId")
                        .IsRequired()
                        .HasConstraintName("fk_speedrunners_teams");

                    b.Navigation("Run");

                    b.Navigation("Speedrunner");
                });

            modelBuilder.Entity("ef_core_mastering.Models.User", b =>
                {
                    b.HasOne("ef_core_mastering.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("fk_coutries_users");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Category", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Contact", b =>
                {
                    b.Navigation("ContactsUsers");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Game", b =>
                {
                    b.Navigation("GamesPlatform");
                });

            modelBuilder.Entity("ef_core_mastering.Models.GamesPlatform", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Language", b =>
                {
                    b.Navigation("LanguagesUsers");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Platform", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Role", b =>
                {
                    b.Navigation("Approves");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Run", b =>
                {
                    b.Navigation("Approves");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ef_core_mastering.Models.Status", b =>
                {
                    b.Navigation("Approves");
                });

            modelBuilder.Entity("ef_core_mastering.Models.User", b =>
                {
                    b.Navigation("Approves");

                    b.Navigation("ContactsUser");

                    b.Navigation("LanguagesUser");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
